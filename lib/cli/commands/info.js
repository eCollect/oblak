'use strict';

const path = require('path');
const fs = require('fs');
const { inspect } = require('util');
const format = require('prettier-eslint');

const Oblak = require('../../Oblak');

const OBLAK_DATA_FILE = 'oblak-data.js';

const prepareConsts = ({ domain, readmodels }) => {
	const events = {
		domain: {},
		readmodels: {},
	};

	const commands = {
		domain: {},
	};

	Object.keys(domain).forEach(ctx => Object.keys(domain[ctx]).forEach(agg => ['commandRejected', ...Object.keys(domain[ctx][agg].events)].forEach((event) => {
		events.domain[ctx] = events.domain[ctx] || {};
		events.domain[ctx][agg] = events.domain[ctx][agg] || {};
		events.domain[ctx][agg][event] = `domain.${ctx}.${agg}.${event}`;
	})));

	Object.keys(domain).forEach(ctx => Object.keys(domain[ctx]).forEach(agg => Object.keys(domain[ctx][agg].commands).forEach((command) => {
		commands.domain[ctx] = commands.domain[ctx] || {};
		commands.domain[ctx][agg] = commands.domain[ctx][agg] || {};
		commands.domain[ctx][agg][command] = `domain.${ctx}.${agg}.${command}`;
	})));

	Object.keys(readmodels).forEach(type => Object.keys(readmodels[type]).forEach((readmodel) => {
		events.readmodels[type] = events.readmodels[type] || {};
		const base = `readmodel.${type}.${readmodel}`;
		events.readmodels[type][readmodel] = {
			create: `${base}.create`,
			update: `${base}.update`,
			delete: `${base}.delete`,
			any: `${base}.*`,
		};
	}));

	return {
		events,
	};
};


const saveConsts = (consts, output) => {
	const filePath = path.join(process.cwd(), output);
	const str = format({ text: `'use strict';\n\n/**\n * Generated by Oblak CLI\n */\n\nmodule.exports = ${inspect(consts, { depth: null, compact: false })}`, filePath });
	fs.writeFileSync(filePath, str, 'utf8');
};


const generatConsts = (oblak, { raw }) => {
	const output = {
		domain: oblak.domain,
		readmodels: oblak.readmodels,
		crudmodels: oblak.crudmodels,
	};
	if (!raw)
		return prepareConsts(output);
	return output;
};

const generateOutput = (konzola, consts, { output = 'std' }) => {
	if (output.toLocaleLowerCase() === 'std')
		return konzola.json(consts);
	return saveConsts(consts, output);
};

const info = {
	description: 'Show info about the app components',

	async getOptionDefinitions() {
		return [{
			name: 'watch',
			alias: 'w',
			type: Boolean,
			description: 'watch for changes',
		},
		{
			name: 'raw',
			alias: 'r',
			type: Boolean,
			default: false,
			description: 'Raw output',
		},
		{
			name: 'output',
			alias: 'o',
			type: String,
			defaultValue: OBLAK_DATA_FILE,
			description: 'Raw output',
		},
		];
	},

	async run({ konzola }, arg) {
		const oblak = Oblak.debug();
		generateOutput(konzola, generatConsts(oblak, arg), arg);
	},
};

module.exports = info;
